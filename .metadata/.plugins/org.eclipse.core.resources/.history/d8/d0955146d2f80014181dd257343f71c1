package jumpingalien.model;

import jumpingalien.util.Sprite;
import jumpingalien.util.Util;

import java.util.Random;

import be.kuleuven.cs.som.annotate.Basic;

public interface OtherCharacters {

	public abstract void advanceTimeLong(double duration);

	/**
	 * A getter method for the variable durationRange
	 */
	@Basic
	public abstract double[] getDurationRange();

	public default void selectMovements(){
		setTimeSinceStartMovement(getTimeSinceStartMovement() - getMovementDuration());
		if (isMovingRight())
			endMove("right");
		else if (isMovingLeft())
			endMove("left");
		setMovementDuration(randomValue(getDurationRange()));
		if (getRandomBoolean())
			startMove("left");
		else
			startMove("right");
	}
	
	public abstract boolean isMovingRight();
	
	public abstract boolean isMovingLeft();
	
	public abstract void startMove(String Direction);
	
	public abstract void endMove(String Direction);

	/**
	 * 
	 * @return	...
	 * 			| Random random = new Random()
	 * 			| return random.nextBoolean()
	 */
	public void boolean getRandomBoolean() {
		Random random = new Random();
		return random.nextBoolean();
	}

	/**
	 * A getter method for the variable timeSinceStartMovement
	 */
	@Basic
	public double getTimeSinceStartMovement() {
		return timeSinceStartMovement;
	}

	/**
	 * A setter method for the variable timeSinceStartMovement
	 */
	@Basic
	public void setTimeSinceStartMovement(double timeSinceStartMovement) {
		this.timeSinceStartMovement = timeSinceStartMovement;
	}

	/**
	 * A double containing the time since the start of a movement
	 */
	public double timeSinceStartMovement = 0.0;

	/**
	 * A getter method for the variable movementDuration
	 */
	@Basic
	public double getMovementDuration() {
		return movementDuration;
	}

	/**
	 * A setter method for the variable movementDuration
	 */
	@Basic
	public void setMovementDuration(double movementDuration) {
		this.movementDuration = movementDuration;
	}

	/**
	 * 
	 * @param range
	 * @return	...
	 * 			| Random t = new Random()
	 * 			| return range[0] + (range[1]-range[0])*r.nextDouble()
	 */
	public double randomValue(double[] range){
		Random r = new Random();
		double value = range[0] + (range[1]-range[0])*r.nextDouble();
		return value;
	}

	/**
	 * A double containing the movement duration
	 */
	public double movementDuration;

	/**
	 * A getter method for the variable terminate time
	 */
	@Basic
	public double getTerminateTime() {
		return terminateTime;
	}

	/**
	 * A setter method for the variable terminate time
	 */
	@Basic
	public void setTerminateTime(double terminateTime) {
		this.terminateTime = terminateTime;
	}

	/**
	 * A double containing the terminate time
	 */
	public double terminateTime = 0.0;

}
