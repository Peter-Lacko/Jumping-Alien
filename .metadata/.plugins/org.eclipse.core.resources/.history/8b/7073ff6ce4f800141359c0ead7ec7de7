package jumpingalien.model;

import be.kuleuven.cs.som.annotate.Basic;
import jumpingalien.util.Sprite;
import jumpingalien.util.Util;


public class Slime extends Characters implements OtherCharacters {

	public Slime(int x_pos, int y_pos, Sprite[] sprites, School school)
			throws IllegalArgumentException {
		super(x_pos, y_pos, sprites, 0.7, 2.5, 0.0, 0.0,100);
		this.setSchool(school);
		durationRange = new double[] {2.0, 6.0};
	}
	
	@Override
	public void advanceTimeLong(double duration){
		super.advanceTimeLong(duration);
		if (! this.isTerminated()){
			if (getTimeSinceStartMovement() < getMovementDuration()){
				setTimeSinceStartMovement(getTimeSinceStartMovement() + duration);
			}
			else{
				selectMovements();
			}
		}
		else{
			this.setTerminateTime(getTerminateTime()+duration);
			if ((this.getTerminateTime() > 0.6) && (! (this.getWorld() == null)))
				this.getWorld().removeAsObject(this);
		}
	}
	
	/**
	 * A getter method for the variable durationRange
	 */
	@Basic @Override
	public double[] getDurationRange() {
		return durationRange;
	}

	/**
	 * A variable containing the range of the movement durations of the characters
	 */
	public final double[] durationRange;

	/**
	 * A getter method for the variable school
	 */
	@Basic
	public School getSchool() {
		return school;
	}

	/**
	 * A setter method for the variable school
	 */
	public void setSchool(School school) {
		if (school == null)
			this.school = school;
		else{
			school.addAsSlime(this);
			this.school = school;
		}
	}

	/**
	 * A variable containing the School of the slime
	 */
	public School school;

	@Override
	public void startJump() {
	}

	/**
	 * @param other
	 * 			the other character in the collision
	 * @param isBelow
	 * 			a boolean stating whether this is below other
	 * @effect	...
	 * 			| if (other instanceof Mazub) 
	 * 			|	if (not other.isimmune()) 
	 * 			|		if (not this.isTerminated())
	 * 			|			then other.damage(50)
	 * 			|				other.startImmune()
	 * 			|		then this.damage(50)
	 * 			|	then this.endMove()
	 * 			|		other.endMove("left")
	 *  		|		other.endMove("right")
	 *  		| else if (other instanceof Shark)
	 *  		|	then this.damage(50) 
	 *  		|		other.damage(50)
	 *  		|		this.endMove()
	 *  		|		other.endMove
	 *  		| else if (other instanceof slime)
	 *  		|	then this.changeschool(other)
	 *  		| else
	 *  		|	then other.collision(this, isBelow)
	 */
	@Override
	public void collision(Characters other) {
		if (other instanceof Mazub){
			if (! ((Mazub)other).isImmune()){
				other.damage(50);
				((Mazub)other).startImmune();
				this.damage(50);
				getSchool().damageAllSlimesBut(this, 1);
			}
		}
		else if (other instanceof Shark){
			this.damage(50);
			getSchool().damageAllSlimesBut(this, 1);
			other.damage(50);
		}
		else if (other instanceof Slime){
			this.changeSchool((Slime)other);
		}
		else if (other instanceof Plant){}
		else
			other.collision(this);
	}

	@Override
	public void collisionNoDamageFrom(Characters other){
		if ((other instanceof Mazub) || (other instanceof Shark) || (other instanceof Slime))
			collision(other);
		else if (other instanceof Plant){}
		else
			other.collisionNoDamageTo(this);
	}

	@Override
	public void collisionNoDamageTo(Characters other){
		if (other instanceof Mazub){
			if (! ((Mazub)other).isImmune()){
				this.damage(50);
				getSchool().damageAllSlimesBut(this, 1);
			}
		}
		else if ((other instanceof Shark) || (other instanceof Slime))
			collision(other);
		else if (other instanceof Plant){}
		else
			other.collisionNoDamageFrom(this);
	}

	@Override
	public boolean collide(Characters other){
		if (other instanceof Mazub)
			return true;
		else if (other instanceof Slime)
			return false;
		else if (other instanceof Shark)
			return true;
		else
			return other.collide(this);
	}

	/**
	 * 
	 * @param other
	 * 			the other slime with which the changeschool happens
	 * @effect	...
	 * 			| if this.getSchool().getNbSlimes < other.getSchool().getNbSlimes()
	 * 			|	then this.getSchool().removeAsSlime(this)
	 * 			|		for slime in this.getSchool().getSlimes()
	 * 			|			slime.damage(-1)
	 * 			|		for slime2 in other.getSchool().getSlimes()
	 * 			|			slime2.damage(1)
	 * 			|		this.damage(this.getSchool().getNbSlimes() - other.getSchool().getNbSlimes())
	 * 			|		this.setSchool(other.getSchool())
	 *  		| if this.getSchool().getNbSlimes > other.getSchool().getNbSlimes()
	 * 			|	then other.getSchool().removeAsSlime(other)
	 * 			|		for slime in other.getSchool().getSlimes()
	 * 			|			slime.damage(-1)
	 * 			|		for slime2 in this.getSchool().getSlimes()
	 * 			|			slime2.damage(1)
	 * 			|		other.damage(other.getSchool().getNbSlimes() - this.getSchool().getNbSlimes())
	 * 			|		other.setSchool(this.getSchool())
	 */
	private void changeSchool(Slime other){
		if (getSchool() != other.getSchool()){
			if (this.getSchool().getNbSlimes() < other.getSchool().getNbSlimes()){
				this.getSchool().removeAsSlime(this);
				getSchool().damageAllSlimesBut(this, -1);
				other.getSchool().damageAllSlimesBut(this, 1);
				this.damage(this.getSchool().getNbSlimes() - other.getSchool().getNbSlimes());
				this.setSchool(other.getSchool());
			}
			else if (this.getSchool().getNbSlimes() > other.getSchool().getNbSlimes()){
				other.getSchool().removeAsSlime(other);
				getSchool().damageAllSlimesBut(this, 1);
				other.getSchool().damageAllSlimesBut(this, -1);
				other.damage(other.getSchool().getNbSlimes() - this.getSchool().getNbSlimes());
				other.setSchool(getSchool());
			}
		}
	}

	/**
	 * @effect	...
	 * 			| if not this.isTerminated
	 * 			|	then this.getWorld().removeAsObject(this)
	 * 			|		this.getSchool().removeAsSlime(this)
	 * 			|		this.setSchool(null)
	 * 			|		this.setTerminated(true)
	 */
	@Override
	protected void terminate() {
		if (! isTerminated()){
			getWorld().removeAsObject(this);
			getSchool().removeAsSlime(this);
			this.setSchool(null);
			this.setTerminated(true);
		}
	}

	/**
	 * A method to determine what damage mazub receives from the environment.
	 * @effect	if mazub is in lava, it is in a bad environment and receives 50 damage. The timer is 
	 * 			set correctly.
	 * 			|for i in 0..getSprite().getWidth()
	 * 			|	for j in 0..getSprite().getHeight()
	 * 			|		if (getGeoFeatureAt(getPixelOfTileContaining(getIntPositionAt(1)+i,
	 * 			|			getIntPositionAt(2)+j)[0], getPixelOfTileContaining(getIntPositionAt(1)+i,
	 * 			|			getIntPositionAt(2)+j)[1]) == GeoFeature.MAGMA)
	 * 			|			then {setBadEnvironment(true)
	 * 			|					if getTimeSinceEnvironmentalDamage() == 0.0
	 * 			|						then this.damage(50)
	 * 			|					setTimeSinceEnvironmentalDamage(getTimeSinceEnvironmentalDamage()+duration)
	 * 			|					if (getTimeSinceEnvironmentalDamage() >= 0.2))
	 * 			|						then setTimeSinceEnvironmentalDamage(getTimeSinceEnvironmentalDamage() - 0.2)
	 * 			else if mazub is in water, it is in a bad environment and receives 2 damage after the first
	 * 			0.2 seconds.The timer is set correctly.
	 * 			|		else if (getGeoFeatureAt(getPixelOfTileContaining(getIntPositionAt(1)+i,
	 * 			|			getIntPositionAt(2)+j)[0], getPixelOfTileContaining(getIntPositionAt(1)+i,
	 * 			|			getIntPositionAt(2)+j)[1]) == GeoFeature.WATER)
	 * 			|		then {setBadEnvironment(true)
	 * 			|				if getTimeSinceEnvironmentalDamage()+duration >= 0.0
	 * 			|					then this.damage(2)
	 * 			|				setTimeSinceEnvironmentalDamage(getTimeSinceEnvironmentalDamage()+duration)
	 * 			|				if (getTimeSinceEnvironmentalDamage() >= 0.2))
	 * 			|					then setTimeSinceEnvironmentalDamage(getTimeSinceEnvironmentalDamage() - 0.2)
	 * 			else mazub is not in a badEnvironment. The timer is set correctly.
	 * 			|		else {setBadEnvironment(false)
	 * 			|			setTimeSinceEnvironmentalDamage(0.0)}
	 * 			
	 */
	public void environmentDamage(double duration) {
		int[] pos = {getIntPositionAt(1),getIntPositionAt(2) + getSprite().getHeight()};
		int[] pos1 = {getIntPositionAt(1) + getSprite().getWidth(),getIntPositionAt(2)};
		int[] pos2 = {getIntPositionAt(1) + getSprite().getWidth(),getIntPositionAt(2)+getSprite().getHeight()};
		if ((environment(getIntPosition()) == GeoFeature.MAGMA) || (environment(pos) == GeoFeature.MAGMA)
				|| (environment(pos1) == GeoFeature.MAGMA) || (environment(pos2) == GeoFeature.MAGMA)){
			this.setBadEnvironment(true);
			if (Util.fuzzyEquals(getTimeSinceEnvironmentalDamage(), 0.0)){
				this.damage(50);
				getSchool().damageAllSlimesBut(this, 1);
			}
		} else if ((environment(getIntPosition()) == GeoFeature.WATER) || (environment(pos) == GeoFeature.WATER)
				|| (environment(pos1) == GeoFeature.WATER) || (environment(pos2) == GeoFeature.WATER)){
			this.setBadEnvironment(true);
			if (Util.fuzzyGreaterThanOrEqualTo(getTimeSinceEnvironmentalDamage()+duration, 0.2)){
				this.damage(2);
				getSchool().damageAllSlimesBut(this, 1);
			}
		}else{
			this.setBadEnvironment(false);
		}
		if (this.isBadEnvironment()){
			this.setTimeSinceEnvironmentalDamage(this.getTimeSinceEnvironmentalDamage()+duration);
			if (Util.fuzzyGreaterThanOrEqualTo(getTimeSinceEnvironmentalDamage(), 0.2))
				//				setTimeSinceEnvironmentalDamage(getTimeSinceEnvironmentalDamage() - 0.2);
				setTimeSinceEnvironmentalDamage(0.0);
		}else{
			this.setTimeSinceEnvironmentalDamage(0.0);
		}
	}

	@Override
	public double getTimeSinceStartMovement() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setTimeSinceStartMovement(double timeSinceStartMovement) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public double getMovementDuration() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setMovementDuration(double movementDuration) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public double getTerminateTime() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setTerminateTime(double terminateTime) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Sprite leftOrRightSprite(int number) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Sprite getCurrentSprite() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean canHaveAsIndex(int index) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isValidNbImages(int nbImages) {
		// TODO Auto-generated method stub
		return false;
	}
}
