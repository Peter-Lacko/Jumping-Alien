package jumpingalien.part3.facade;

import java.util.Collection;
import java.util.Optional;

import jumpingalien.model.Buzam;
import jumpingalien.model.Characters;
import jumpingalien.model.Mazub;
import jumpingalien.model.Plant;
import jumpingalien.model.School;
import jumpingalien.model.Shark;
import jumpingalien.model.Slime;
import jumpingalien.model.World;
import jumpingalien.model.program.Program;
import jumpingalien.model.program.ProgramFactory;
import jumpingalien.model.program.expression.*;
import jumpingalien.model.program.statement.Statement;
import jumpingalien.model.program.type.Type;
import jumpingalien.part3.facade.IFacadePart3;
import jumpingalien.part3.programs.ParseOutcome;
import jumpingalien.part3.programs.ProgramParser;
import jumpingalien.util.ModelException;
import jumpingalien.util.Sprite;

public class Facade implements IFacadePart3 {

	public Mazub createMazub(int pixelLeftX, int pixelBottomY, Sprite[] sprites){
		try{
			return new Mazub(pixelLeftX,pixelBottomY,sprites);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}

	}
	
	public int[] getLocation(Mazub mazub){
		try {
			return mazub.getIntPosition();
		}
		catch (ArrayIndexOutOfBoundsException exc) {
			throw new ModelException("position error");
		}
	}
	
	public double[] getVelocity(Mazub mazub){
	double[] vel = {mazub.getHorizontalVelocity(), mazub.getVerticalVelocity()};
	return vel;
	}
	
	public double[] getAcceleration(Mazub mazub){
		double[] acc = {mazub.getHorizontalAcceleration(), mazub.getVerticalAcceleration()};
		return acc;
	}
	
	public int[] getSize(Mazub mazub){
		return mazub.getSize();
	} 
	
	public Sprite getCurrentSprite(Mazub mazub){
		return mazub.getCurrentSprite();
	}
	
	public void startJump(Mazub mazub) {
		try{
			mazub.startJump();
		}
		catch (IllegalArgumentException exc){
			throw new ModelException("jump error");
		}
	}
	
	public void endJump(Mazub mazub) {
		mazub.endJump();
	}
	
	public void startMoveLeft(Mazub mazub) {
		mazub.startMove("left");
	}
	
	public void endMoveLeft(Mazub mazub) {
		mazub.endMove("left");
	}
	
	public void startMoveRight(Mazub mazub) {
		mazub.startMove("right");
	}
	
	public void endMoveRight(Mazub mazub) {
		mazub.endMove("right");
	}
	
	public void startDuck(Mazub mazub){
		try {
			mazub.startDuck();
		}
		catch (IllegalArgumentException exc){
			throw new ModelException("startDuck error");
		}
	}
	
	public void endDuck(Mazub mazub){
		try {
			mazub.endDuck();
		}
		catch (IllegalArgumentException exc){
			throw new ModelException("endDuck error");
		}
	}
	
	public int getNbHitPoints(Mazub alien){
		return alien.getHitPoints();
	}
	
	public World createWorld(int tileSize, int nbTilesX, int nbTilesY,
			int visibleWindowWidth, int visibleWindowHeight, int targetTileX,
			int targetTileY){
		try{
			return new World(tileSize, nbTilesX, nbTilesY, visibleWindowWidth, visibleWindowHeight, targetTileX, targetTileY);
		}
		catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");	
		}
	}
	
	public int[] getWorldSizeInPixels(World world){
		return world.getWorldSize();
	}
	
	public int getTileLength(World world){
		return world.getTileLength();
	}
	
	public void startGame(World world){
		world.startGame();
	}
	
	public boolean isGameOver(World world){
		return (world.isGameOver() || world.hasPlayerWon());
	}
	
	public boolean didPlayerWin(World world){
		return world.hasPlayerWon();
	}
	
	public void advanceTime(World world, double dt){
		world.advanceTime(dt);
	}
	
	public int[] getVisibleWindow(World world){
		if (! isGameOver(world))
			return world.getVisibleWindow();
		else
			return null;
	}
	
	public int[] getBottomLeftPixelOfTile(World world, int tileX, int tileY){
		return world.getBottomLeftPixelOfTile(tileX, tileY);
	}
	
	public int[][] getTilePositionsIn(World world, int pixelLeft, int pixelBottom,
			int pixelRight, int pixelTop){
		return world.getTilePositionsIn(pixelLeft, pixelBottom, pixelRight, pixelTop);
	}
	
	public int getGeologicalFeature(World world, int pixelX, int pixelY)
			throws ModelException{
		try{
			return world.getGeoFeatureAt(pixelX, pixelY).getValue();
		} catch (Exception exc){
			throw new ModelException("get geofeature error");
		}
	}
	
	public void setGeologicalFeature(World world, int tileX, int tileY, int tileType) 
			throws ModelException{
		try{
//			world.setGeoFeatureAt(tileX, tileY, GeoFeature.values()[tileType]);
			world.setGeoFeatureAtWithInt(tileX, tileY, tileType);
		} catch (Exception exc){
			throw new ModelException("set geofeature error");
		}
	}
	
	public void setMazub(World world, Mazub alien){
		world.addMazub(alien);
	}
	
	public boolean isImmune(Mazub alien){
		return alien.isImmune();
	}
	
	public Plant createPlant(int x, int y, Sprite[] sprites){
		try{
			return new Plant(x,y,sprites);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}
	
	public void addPlant(World world, Plant plant){
		world.addAsObject(plant);
	}
	
	public Collection<Plant> getPlants(World world){
		return world.getAllPlants();
	}
	
	public int[] getLocation(Plant plant){
		return plant.getIntPosition();
	}
	
	public Sprite getCurrentSprite(Plant plant){
		return plant.getSprite();
	}
	
	public Shark createShark(int x, int y, Sprite[] sprites){
		try{
			return new Shark(x,y,sprites);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}

	public void addShark(World world, Shark shark){
		world.addAsObject(shark);
	}

	public Collection<Shark> getSharks(World world){
		return world.getAllSharks();
	}

	public int[] getLocation(Shark shark){
		return shark.getIntPosition();
	}

	public Sprite getCurrentSprite(Shark shark){
		return shark.getSprite();
	}
	
	public School createSchool(){
		School school = new School();
		return school;
	}
	
	public Slime createSlime(int x, int y, Sprite[] sprites, School school){
		try{
			return new Slime(x,y,sprites,school);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}
	
	public void addSlime(World world, Slime slime){
		world.addAsObject(slime);
	}
	
	public Collection<Slime> getSlimes(World world){
		return world.getAllSlimes();
	}
	
	public int[] getLocation(Slime slime){
		return slime.getIntPosition();
	}

	public Sprite getCurrentSprite(Slime slime){
		return slime.getSprite();
	}

	public School getSchool(Slime slime){
		return slime.getSchool();
	}

	@Override
	public Buzam createBuzam(int pixelLeftX, int pixelBottomY, Sprite[] sprites) {
		try{
			return new Buzam(pixelLeftX,pixelBottomY,sprites);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}

	@Override
	public Buzam createBuzamWithProgram(int pixelLeftX, int pixelBottomY,
			Sprite[] sprites, Program program) {
		try{
			return new Buzam(pixelLeftX,pixelBottomY,sprites,program);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}

	@Override
	public Plant createPlantWithProgram(int x, int y, Sprite[] sprites,
			Program program) {
		try{
			return new Plant(x,y,sprites,program);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}

	@Override
	public Shark createSharkWithProgram(int x, int y, Sprite[] sprites,
			Program program) {
		try{
			return new Shark(x,y,sprites,program);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}

	@Override
	public Slime createSlimeWithProgram(int x, int y, Sprite[] sprites,
			School school, Program program) {
		try{
			return new Slime(x,y,sprites,school,program);
		} catch (IllegalArgumentException exc){
			throw new ModelException("invalid initialisation");
		}
	}

	@Override
	public ParseOutcome<?> parse(String text) {
		ProgramFactory factory = new ProgramFactory();
		ProgramParser<Expression<? extends Type<?>>, Statement, Type, Program> parser = new ProgramParser(factory);
		Optional<Program> parse = parser.parseString(text);
		if (parse.isPresent())
			return ParseOutcome.success(parse.get());
		else 
			return ParseOutcome.failure(parser.getErrors());
	}

	@Override
	public boolean isWellFormed(Program program) {
		return program.isWellFormed();
	}

	@Override
	public void addBuzam(World world, Buzam buzam) {
		world.addAsObject(buzam);
	}

	@Override
	public int[] getLocation(Buzam alien) {
		try {
			return alien.getIntPosition();
		}
		catch (ArrayIndexOutOfBoundsException exc) {
			throw new ModelException("position error");
		}
	}

	@Override
	public double[] getVelocity(Buzam alien) {
		double[] vel = {alien.getHorizontalVelocity(), alien.getVerticalVelocity()};
		return vel;
	}

	@Override
	public double[] getAcceleration(Buzam alien) {
		double[] acc = {alien.getHorizontalAcceleration(), alien.getVerticalAcceleration()};
		return acc;
	}

	@Override
	public int[] getSize(Buzam alien) {
		return alien.getSize();
	}

	@Override
	public Sprite getCurrentSprite(Buzam alien) {
		return alien.getCurrentSprite();
	}

	@Override
	public int getNbHitPoints(Buzam alien) {
		return alien.getHitPoints();
	}
}
