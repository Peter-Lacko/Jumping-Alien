package jumpingalien.model;

import jumpingalien.util.Sprite;
import jumpingalien.util.Util;
import be.kuleuven.cs.som.annotate.*;

public abstract class Aliens extends Characters {

	public Aliens(int x_pos, int y_pos, Sprite[] sprites, double hor_acc, double max_hor_vel, 
			double init_hor_vel, double init_ver_vel, int hitpoints)
					throws IllegalArgumentException {
		super(x_pos, y_pos, sprites, hor_acc, max_hor_vel, init_hor_vel, init_ver_vel, hitpoints);
	}

	/**
	 * A method to determine whether to use the left or right version of a sprite.
	 * @pre number is in the range of images (minus one).
	 * 		| (number >=0) && (number + 1 < getNbImages())
	 * @param number
	 * 			the index in images where the left and right version of the sprite to be returned, is stored.
	 * @return return the correct version of the sprite, depending on the state of the character.
	 * 			if the character isn't moving in both directions, and is moving or has moved left,
	 * 			then return the left sprite, otherwise the right sprite.
	 * 			if the character is moving in both directions, and has moved left, return the left
	 * 			sprite. otherwise return the right sprite.
	 */
	@Override
	public Sprite leftOrRightSprite(int number){
		assert (number >= 0);
		assert (number + 1 < getNbImages());
		if ((this.getHorizontalVelocity() < 0) || (getHasMovedIn() == MovementDirection.LEFT)){
			return getImageAt(number + 2);
		} else{
			return getImageAt(number + 1);
		}
	}

	/**
	 * A method that returns the Sprite for the character with its current variables.
	 * @return The new Sprite is determined depending on the state of the character.
	 * 			if the character is in the air and has moved in the last second and is not ducked,
	 * 			return the correct sided sprite for this case. Otherwise, if the character is ducked and 
	 * 			has moved in the last second, return the correct sided sprite for this case. Otherwise,
	 * 			if the character has move in the last second, return the correct sided (walking/ running 
	 * 			cycle) sprite for this case. otherwise, if the character is ducked and has not moved
	 * 			in the last second, return the correct sprite for this case. Otherwise, return the last
	 * 			available sprite.
	 */
	@Override
	public Sprite getCurrentSprite(){
		if ((isFalling()) && (this.getHasMovedIn() != MovementDirection.NONE) && (! isDucked())){
			return leftOrRightSprite(4);
		} else if ((isDucked()) && (this.getHasMovedIn() != MovementDirection.NONE)){
			return leftOrRightSprite(6);
		} else if (this.getHasMovedIn() != MovementDirection.NONE){
			return getCurrentWalkCycleSprite();
		} else if ((isDucked()) && (this.getHasMovedIn() == MovementDirection.NONE)){
			return getImageAt(2);
		} else{
			return getImageAt(1);
		}
	}

	/**
	 * A method that returns the walking/running cycle sprite for the character. It possibly returns a
	 * non-cycle sprite if the character is moving in both directions
	 * @return The new walking/ running cycle Sprite is determined depending on the state of the character.
	 * 			if there has been sufficient time since the last frame of animation, set the index to the
	 * 			next frame and reset the timer. if the character is moving in both directions (ie not 
	 * 			moving) return the correct sided sprite for this case. Otherwise, if the character is 
	 * 			moving right, return the correct sided sprite for this case. Otherwise, if the character
	 * 			is moving left, return the correct sided sprite for this case. Otherwise, return the
	 * 			correct sided sprite for all other cases.
	 */
	protected Sprite getCurrentWalkCycleSprite() {
		if (getTimeSinceStep() > 0.075){
			if (getIndex() < getNbRunningCycle()-1)
				setIndex(getIndex() + 1);
			else 
				setIndex(0);
			setTimeSinceStep(getTimeSinceStep() - 0.075);
		}
		if (this.getHorizontalVelocity() > 0)
			return getImageAt(9+getIndex());
		else if (this.getHorizontalVelocity() < 0) 
			return getImageAt(9+getNbRunningCycle()+getIndex());
		else {
			return leftOrRightSprite(2);
		}
	}

	/**
	 * Check whether the character can have the given index for its run cycle.
	 * @param number
	 * 			the number to be checked.
	 * @return True if the index is bigger or equal to 0, and smaller than the amount of images for
	 * 			the character's run cycle.
	 * 			| result == ((number >= 0) && (number < this.getNbRunningCycle()))
	 */
	@Override
	public boolean canHaveAsIndex(int number) {
		return ((number >= 0) && (number < this.getNbRunningCycle()));
	}

	/**
	 * Set the character's running cycle index to the given number
	 * @pre The given number must be a valid index.
	 * 		| canHaveAsIndex(number)
	 * @param number
	 * 			the number to set the index at.
	 * @post	The new index is equal to the given number.
	 * 			new.getIndex() == number
	 */
	public void setIndex(int number) {
		assert canHaveAsIndex(number);
		this.index = number;
	}

	/**
	 * A method to return at which sprite in the run cycle the character is.
	 */
	@Basic
	public int getIndex() {
		return this.index;
	}

	/**
	 * A variable to determine at which sprite in the run cycle the character is.
	 */
	private int index = 0;

	/**
	 * A method to return how many sprites there are for a running animation.
	 */
	@Basic @Immutable
	public int getNbRunningCycle() {
		return this.nbRunningCycle;
	}

	/**
	 * A variable that stores how many sprites there are for a running animation (running to the left and
	 * right have the same amount of sprites for the animation).
	 */
	private final int nbRunningCycle ;

	/**
	 * Check whether the character can have the given number as the amount of images for the running cycle.
	 * @param number
	 * 			the number to check.
	 * @return	true if the number is bigger than 0.
	 * 			|(number > 0)
	 */
	public boolean isValidNbRunningCycle(int number){
		return (number > 0);
	}

	/**
	 * Check whether the given amount of images is valid.
	 * @param nbImages
	 * 			the amount to check.
	 * @return true if the amount is bigger or equal to 10 and divisible by 2. (there are different states
	 * 			of the character summing up to at least 10 different sprites total, and it must be divisible
	 * 			by two due to the fact that there must be left and right sided sprites.)
	 * 			| (nbImages >= 10) && (nbImages % 2 == 0)
	 */
	@Override
	public boolean isValidNbImages(int nbImages){
		return ((nbImages >= 10) && (nbImages % 2 == 0));
	}

	public abstract void advanceTimeLong(double duration);

	@Override
	public abstract boolean collide(Characters other);

	/**
	 * A method to determine what actions should be taken if the character is moving in two directions
	 * (when both keys are pushed). The character will not move in such a case.
	 * @post if the character is moving in both directions, the new character is moving in both directions
	 * 		| if (isMovingLeft() && isMovingRight())
	 * 		|	new.movingInTwoDirections() == true
	 * 		otherwise the new character is not moving in both directions.
	 * 		| else
	 * 		| 	new.movingInTwoDirections() == false
	 * @post 	if the character is not moving in both directions, and is moving right, then the new character
	 * 			has moved right.
	 * 			|if (! (isMovingLeft() && isMovingRight())) && isMovingRight()
	 * 			|	new.getHasMovedIn() == MovementDirection.RIGHT
	 * @post 	if the character is not moving in both directions, and is moving right, then no time has 
	 * 			passed since the new character stopped.
	 * 			|if (! (isMovingLeft() && isMovingRight())) && isMovingRight()
	 * 			|	new.getTimeSinceEndMove() == 0.0
	 * @post 	if the character is not moving in both directions, and is moving left, then the new character
	 * 			has moved left.
	 * 			|if (! (isMovingLeft() && isMovingRight())) && isMovingLeft()
	 * 			|	new.getHasMovedIn() == MovementDirection.LEFT
	 * @post 	if the character is not moving in both directions, and is moving left, then no time has 
	 * 			passed since the new character stopped.
	 * 			|if (! (isMovingLeft() && isMovingRight())) && isMovingLeft()
	 * 			|	new.getTimeSinceEndMove() == 0.0
	 */
	@Model
	private void determineDirection() {
		if (this.isMovingRight()){
			this.sethasMovedIn(MovementDirection.RIGHT);
			setTimeSinceEndMove(0.0);
		}
		else if (this.isMovingLeft()){
			this.sethasMovedIn(MovementDirection.LEFT);
			setTimeSinceEndMove(0.0);
		}
	}

	/**
	 * Stop moving the character in the given direction
	 * @param direction
	 * 			The direction to stop moving in.
	 * @pre The direction must be left or right
	 * 		| (direction == "left") || (direction == "right")
	 * @post if the direction was left, the new character is not moving left.
	 * 		| if (direction == "left")
	 * 		|	then new.isMovingLeft() == false
	 * @post if the direction was right, the new character is not moving right.
	 * 		| if (direction == "right")
	 * 		|	then new.isMovingRight() == false
	 * @post The index of the new character's running cycle is reset.
	 * 		| new.getIndex() = 0
	 */
	@Override
	public void endMove (String direction) {
		super.endMove(direction);
		setIndex(0);
	}

	/**
	 * A method that starts the character's duck
	 * @post	the new character is ducking
	 * 			| new.isDucked() = true
	 * @effect the maximum horizontal velocity is set to 1
	 * 			| setMaxHorizontalVelocity(1.0)
	 * @effect	the character is not trying to end their duck
	 * 			| setEndDuck(false)
	 */
	public void startDuck() throws IllegalArgumentException{
		try{
			this.setMaxHorizontalVelocity(1.0);
			this.setIsDucked(true);
			this.setEndDuck(false);
		}
		catch (IllegalArgumentException exc) {
			throw exc;
		}
	}

	/**
	 * A method that says when mazub should try to stand up.
	 * @effect setEndDuck(true);
	 */
	public void endDuck() throws IllegalArgumentException{
		try{
			setEndDuck(true);
		}
		catch (IllegalArgumentException exc) {
			throw exc;
		}
	}

	/**
	 * Check whether mazub can stand up without moving. This is due to the fact that the sprite width of a
	 * ducked mazub is smaller than the sprite width of a standing mazub.
	 * @return false if the added width when standing up is in any ground tile.
	 * 			| let standingSprite = [sprite with mazub's current attributes, but standing]
	 * 			|for j in 1..standingSprite.getHeight()
	 * 			|	for i in 1..standingSprite.getWidth() - getSprite().getWidth()
	 * 			|		let pos = {getIntPositionAt(1) + getSprite().getWidth() +i,getIntPositionAt(2) +j}
	 * 			|		if (getWorld().getGeoFeatureAt(getWorld().getPixelOfTileContaining(pos[0], pos[1])[0]
	 * 			|			, getWorld().getPixelOfTileContaining(pos[0], pos[1])[1]) == GeoFeature.GROUND)
	 * 			|			then result == false
	 * 			|else result == true
	 */
	public boolean canEndDuckWithoutMove(){
		boolean oldDuck = isDucked();
		this.setIsDucked(false);
		Sprite standingSprite = getCurrentSprite();
		this.setIsDucked(oldDuck);
		int nbPixelsWidth = standingSprite.getWidth() - getSprite().getWidth();
		if (nbPixelsWidth > 0){
			int nbPixelsHeight = standingSprite.getHeight();
			int tileLength = getWorld().getTileLength();
			for (int j=1;j <=nbPixelsHeight; j = j + tileLength){
				for (int i = 1; i <=nbPixelsWidth; i = i +tileLength){
					int[] pos = new int[] {getIntPositionAt(1) + getSprite().getWidth() +i,
							getIntPositionAt(2) +j};
					pos = getWorld().getPixelOfTileContaining(pos[0], pos[1]);
					if (getWorld().getGeoFeatureAt(pos[0], pos[1]) == GeoFeature.GROUND){
						return false;
					}
				}
			}
		}
		return true;
	}

	@Override
	public void collision(Characters other) {
		// TODO Auto-generated method stub

	}

	@Override
	public void collisionNoDamageFrom(Characters other) {
		// TODO Auto-generated method stub

	}

	@Override
	public void collisionNoDamageTo(Characters other) {
		// TODO Auto-generated method stub

	}

}
