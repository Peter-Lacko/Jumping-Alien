package jumpingalien.model.program.statement;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Predicate;
import java.util.stream.Stream;
import java.util.stream.Stream.Builder;

import jumpingalien.model.GameObject;
import jumpingalien.model.program.expression.Expression;
import jumpingalien.model.program.expression.ExpressionBasic;
import jumpingalien.model.program.expression.ExpressionVariableGameObject;
import jumpingalien.model.program.expression.unary.*;
import jumpingalien.model.program.type.*;
import jumpingalien.model.program.type.Object;
import jumpingalien.part3.programs.IProgramFactory.*;
import jumpingalien.part3.programs.SourceLocation;
import jumpingalien.util.Util;

public class ForEachLoop extends LoopStatement {

	public ForEachLoop(String name, Kind kind, Expression<Bool> whereExpression,
			Expression<DoubleType> sortExpression, SortDirection sortDirection,
			SourceLocation sourceLocation, Statement loopStatement) {
		super(sourceLocation, loopStatement);
		this.name = name;
		this.kind = kind;
		this.sortDirection = sortDirection;
		this.whereExpression = whereExpression;
		if (whereExpression != null)
			whereExpression.setStatement(this);
		this.sortExpression = sortExpression;
		if (sortExpression != null)
			sortExpression.setStatement(this);
	}

	private final String name;
	
	public String getName() {
		return name;
	}

	private ForEachLoop getForEachLoop(){
		return this;
	}
	
	private final Kind kind;
	
	public Kind getKind() {
		return kind;
	}

	private final Expression<Bool> whereExpression;
	
	private final Expression<DoubleType> sortExpression;
	
	public Expression<Bool> getWhereExpression() {
		return whereExpression;
	}

	public Expression<DoubleType> getSortExpression() {
		return sortExpression;
	}

	public SortDirection getSortDirection() {
		return sortDirection;
	}

	private final SortDirection sortDirection;
	
	private Object[] currentArray = {};

	public Object getCurrentArrayObjectAt(int index) throws IndexOutOfBoundsException{
		return this.currentArray[index-1];
	}
	
	public Object[] getCurrentArray() {
		return currentArray;
	}

	public void setCurrentArray(Object[] currentArray) {
		this.currentArray = currentArray;
	}
	
	public int getCurrentArrayLength(){
		return this.currentArray.length;
	}

	public Stream<Object> stream() {
    	Builder<Object> builder = Stream.builder();
    	for (GameObject element: getProgram().getCharacter().getWorld().getAllObjectsAndTiles()){
    		Object resultElement = new Object(element);
    		builder.accept(resultElement);
    	}
    	return builder.build();    		
    }
	
	@Override
	public Iterator<Statement> iterator() {
		return new Iterator<Statement>(){

			@Override
			public boolean hasNext() {
				if (isBreak())
					return false;
				else if (! arraySet)
					return true;
				else if (getCurrentArrayLength() == 0)
					return false;
				else if (arrayIndex < getCurrentArrayLength())
					return true;
				else{
					if (! variableAssigned)
						return true;
					else
						return currentIterator.hasNext();
				}
			}

			@Override
			public Statement next() throws NoSuchElementException{
				if (! hasNext())
					throw new NoSuchElementException();
				if (! arraySet){
					arraySet = true;
					return getForEachLoop();
				}
				else if (! variableAssigned){
					expressionBasic = new ExpressionBasic<Object>(getCurrentArrayObjectAt(arrayIndex),
							getSourceLocation());
					assignment = new Assignment<Object>(getName(), expressionBasic, getSourceLocation(),
							new Object(null));
					expressionBasic.setStatement(getForEachLoop());
					assignment.setEnclosingStatement(getForEachLoop());
					variableAssigned = true;
					if (! currentIterator.hasNext() && (arrayIndex < getCurrentArrayLength())){
						currentIterator = getLoopBody().iterator();
						variableAssigned = false;
						arrayIndex++;
					}
					return assignment;
				}
				else{
					Statement nextValue = currentIterator.next();
					if ((! currentIterator.hasNext()) && (arrayIndex < getCurrentArrayLength())){
						currentIterator = getLoopBody().iterator();
						variableAssigned = false;
						arrayIndex++;
					}
					return nextValue;
				}
			}
			
			private ExpressionBasic<Object> expressionBasic = null;
			
			private Assignment<Object> assignment = null;
			
			private boolean variableAssigned = false;
			
			private boolean arraySet = false;
			
			private int arrayIndex = 1;
			
			private Iterator<Statement> currentIterator = getLoopBody().iterator();
			
		};
	}

	@Override
	public void execute() {
		ExpressionVariableGameObject originalVariable = new ExpressionVariableGameObject(getSourceLocation(),
				getName());
		originalVariable.setStatement(this);
		Object originalObject = new Object(originalVariable.compute().getValue());
		ExpressionBasic<Object> originalValue = new ExpressionBasic<Object>(originalObject,getSourceLocation());
		Stream<Object> result = null;
		if (!(getForEachLoop().getKind() == Kind.ANY)){
			result = this.stream().filter( o -> o.getKind() == getForEachLoop().getKind());
		}
		else{
			result = this.stream();
		}
		if (getWhereExpression() != null){
			result = result.filter(
					o -> {
					ExpressionBasic<Object> e = new ExpressionBasic<Object>(o, getSourceLocation());
					Object d = new Object(null);
					Assignment<Object> a = new Assignment<Object>(getName(),e,getSourceLocation(),d);
					a.setEnclosingStatement(this);
					a.execute();
					System.out.println(getWhereExpression().compute().getValue());
					if (getWhereExpression().compute().getValue())
						return true;
					return false;}
					);
		}
		if ((getSortExpression() != null) && (getSortDirection() != null)){
			result = result.sorted(
					(o1, o2) ->{
						double computed1;
						double computed2;
						ExpressionBasic<Object> e1 = new ExpressionBasic<Object>(o1, getSourceLocation());
						ExpressionBasic<Object> e2 = new ExpressionBasic<Object>(o2, getSourceLocation());
						Object d1 = new Object(null);
						Assignment<Object> a1 = new Assignment<Object>(getName(),e1,getSourceLocation(),d1);
						a1.setEnclosingStatement(this);
						a1.execute();
						computed1 = getSortExpression().compute().getValue();
						Object d2 = new Object(null);
						Assignment<Object> a2 = new Assignment<Object>(getName(),e2,getSourceLocation(),d2);
						a2.setEnclosingStatement(this);
						a2.execute();
						computed2 = getSortExpression().compute().getValue();
						if(! Util.fuzzyLessThanOrEqualTo(computed1, computed2)){
							if (getSortDirection() == SortDirection.ASCENDING)
								return 1;
							else
								return -1;
						}
						else if(! Util.fuzzyLessThanOrEqualTo(computed2, computed1)){
							if (getSortDirection() == SortDirection.ASCENDING)
								return -1;
							else
								return 1;
						}
						else
							return 0;}
					);
		}
		java.lang.Object[] resultArray = result.toArray();
		setCurrentArray(Arrays.copyOf(resultArray, resultArray.length, Object[].class));
		Assignment<Object> finalAssignment = new Assignment<Object>(getName(),originalValue,
				getSourceLocation(), new Object(null));
		finalAssignment.setEnclosingStatement(this);
		finalAssignment.execute();
	}

}
