package jumpingalien.model;
import jumpingalien.util.Util;
import be.kuleuven.cs.som.annotate.*;

/**
 * A class of positions involving 2 coordinates and a scale type.
 * @author Peter Lacko (2nd Bachelor - Computer Sciences (Major) and Electrical Engineering (Minor)),
 * 			Sander Switsers (2nd Bachelor - Computer Sciences (Major) and Electrical Engineering (Minor))
 * @version 1.0
 * Code repository: https://github.com/Peter-Lacko/Jumping-Alien
 */
@Value
public class Position{
	
	/**
	 * 
	 * @param xPos
	 * @param yPos
	 * @param type
	 * @post	|new.getXCo() == xPos
	 * @post	|new.getYCo() == yPos
	 * @post	|new.getScale() == type
	 * @throws IllegalArgumentException
	 * 			|(! isValidScale(type))
	 */
	public Position(double xPos, double yPos, Scale type) throws IllegalArgumentException{
		xCo = xPos;
		yCo = yPos;
		scale = type;
	}
	
	/**
	 * 
	 * @param xPos
	 * @param yPos
	 * @effect	|this(xPos, yPos, Scale.PIXEL)
	 */
	public Position(double xPos, double yPos) throws IllegalArgumentException{
		this(xPos, yPos, Scale.PIXEL);
	}
	
	/**
	 * @return	| START_PIXEL.equals(new Position(0, 0, Scale.PIXEL))
	 */
	public final static Position START_PIXEL = new Position(0, 0, Scale.PIXEL);
	
	
	/**
	 * @return	| START_TILE.equals(new Position(0, 0, Scale.TILE))
	 */
	public final static Position START_TILE = new Position(0, 0, Scale.TILE);
	
	@Basic
	public double getXCo(){
		return xCo;
	}
	
	@Basic
	public double getYCo(){
		return yCo;
	}
	
	/**
	 * 
	 * @effect	|result == {getXCo(), getYCo()}
	 */
	public double[] getPosition(){
		return new double[] {getXCo(), getYCo()};
	}
	
	/**
	 * 
	 * @effect	|result == (int)getXCo()
	 */
	public int getIntXCo(){
		return (int)getXCo();
	}
	
	/**
	 *
	 * @effect	|result == (int)getYCo()
	 */
	public int getIntYCo(){
		return (int)getYCo();
	}
	
	/**
	 * 
	 * @effect	|result == {getIntXCo(), getIntYCo()}
	 */
	public int[] getIntPosition(){
		return new int[] {getIntXCo(), getIntYCo()};
	}
	
	@Basic
	public Scale getScale(){
		return scale;
	}
	
	/**
	 * 
	 * @param scale
	 * @return	|result == ((scale == Scale.PIXEL) || (scale == Scale.TILE))
	 */
	public static boolean isValidScale(Scale scale){
		return ((scale == Scale.PIXEL) || (scale == Scale.TILE));
	}
	
	/**
	 * 
	 * @param scale
	 * @return	|result.getScale() == scale
	 * @return	|result.getXCo() == getXCo()*getScale().toScale(scale)
	 * @return	|result.getYCo() == getYCo()*getScale().toScale(scale)
	 * @throws IllegalArgumentException
	 * 			|(! isValidScale(scale))
	 */
	public Position toScale(Scale scale) throws IllegalArgumentException{
		if (! isValidScale(scale))
			throw new IllegalArgumentException();
		if (this.getScale() == scale)
			return this;
		double newXCo = getXCo()*getScale().toScale(scale);
		double newYCo = getYCo()*getScale().toScale(scale);
		return new Position(newXCo, newYCo, scale);
	}
	
	private final double xCo;
	
	private final double yCo;
	
	private final Scale scale;
	
	/**
	 * @return	|result == ((other != null) && (getClass() == other.getClass())	
	 * 			|			&& (getXCo() == ((Position)other).toScale(getScale()).getXCo())
	 * 			|			&& (getYCo() == ((Position)other).toScale(getScale()).getYCo())
	 */
	@Override
	public boolean equals(Object other){
		if (other == null)
			return false;
		if (this.getClass() != other.getClass())
			return false;
		Position otherPos = ((Position)other).toScale(getScale());
		return ((Util.fuzzyEquals(getXCo(), otherPos.getXCo())) 
				&& (Util.fuzzyEquals(getYCo(), otherPos.getYCo())));
	}
	
	@Override
	public int hashCode(){
		return 0;
	}
	
}
