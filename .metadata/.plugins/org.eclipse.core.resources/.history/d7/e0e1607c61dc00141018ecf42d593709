package jumpingalien.model;

import be.kuleuven.cs.som.annotate.*;
import jumpingalien.util.Sprite;
import jumpingalien.model.PositionCalculator;

public abstract class Characters {
	
	@Raw
	public character(int x_pos, int y_pos, Sprite[] sprites) throws IllegalArgumentException{
		if (! isValidPositionAt((double) x_pos, 1))
			throw new IllegalArgumentException("Illegal x-coordinate!");
		if (! isValidPositionAt((double) y_pos, 2))
			throw new IllegalArgumentException("Illegal y-coordinate!");
		if (! isValidNbImages(sprites.length))
			throw new IllegalArgumentException("Illegal sprite array length!");
		if (! hasProperSprites(sprites))
			throw new IllegalArgumentException("Illegal sprite array!");
		this.images = sprites.clone();
		this.nbRunningCycle = getNbImages()/2-4;
		this.setSprite(getImageAt(1));
		this.setPositionAt((double) x_pos, 1);
		this.setPositionAt((double) y_pos, 2);
	}
	
	public abstract boolean isValidNbImages(int nbSprites);
	
	/**
	 * Return the number of coordinates ascribed to this character.
	 * @throws NullPointerException
	 * 			Null is not a valid array for the Position
	 * 			| this.getPosition() == null
	 */
	@Basic @Immutable
	public int getNbPosition() throws NullPointerException {
		return getPosition().length;
	}
	
	/**
	 * Check whether the number of coordinates is valid for any character.
	 * 
	 * @param nbPosition
	 * 			The number of coordinates to check.
	 * @return True if and only if the given number of coordinates is 2 (the game takes place in a 2D plane)
	 * 			| result == (nbPosition == 2)
	 */
	public static boolean isValidNbPosition(int nbPosition){
		return (nbPosition == 2);
	}
	
	/**
	 * Return the actual coordinate (in the form of a double) ascribed to this character at the given index.
	 * @param index
	 * 			The index of coordinate to return (X-coordinate is at the first index, Y-coordinate is at 
	 * 			the second index)
	 * @throws ArrayIndexOutOfBoundsException
	 * 			The given index must be positive and may not be bigger than 2.
	 * 			| (index <= 0) || (index > 2)
	 */
	@Basic
	public double getPositionAt(int index) throws ArrayIndexOutOfBoundsException{
		return Position[index-1];
	}
	
	/**
	 * Return the coordinates of the character in the playing field
	 * @return	the rounded down coordinates in the form of an int[]
	 * 			| return [getIntPositionAt(1),getIntPositionAt(2)]
	 */
	public int[] getIntPosition(){
		try{
			int[] position = {getIntPositionAt(1),getIntPositionAt(2)};
			return position;
		}
		catch (ArrayIndexOutOfBoundsException exc){
			throw exc;
		}
	}
	
	/**
	 * Return the rounded down coordinate (in the form of an int) ascribed to this character at the given index.
	 * @param index
	 * 			The index of coordinate to return (X-coordinate is at the first index, Y-coordinate is at 
	 * 			the second index)
	 * @effect	Rounds down the position at the requested index and converts to an int type.
	 * 			| (int)getPositionAt(index)
	 */
	public int getIntPositionAt(int index) throws ArrayIndexOutOfBoundsException{
		return (int)getPositionAt(index);
	}
	
	/**
	 * Check whether the character can have the given coordinate at the given index.
	 * @param coordinate
	 * 			The coordinate to check
	 * @param index
	 * 			The index for the coordinate to check
	 * @return True if it is an X-coordinate in the correct range or a Y-coordinate in the correct range
	 * 			(the rounded down value must be between X_MIN, X_MAX or Y_MIN, Y_MAX respectively)
	 * 			| if ((index == 1) && ((int)coordinate >= X_MIN) && ((int)coordinate <= X_MAX))
	 * 			|	then result == true
	 * 			| else if ((index ==2) && ((int)coordinate >= Y_MIN) && ((int)coordinate <= Y_MAX))
	 * 			|	then result == true
	 * 			| else result == false
	 */
	public static boolean isValidPositionAt (double coordinate, int index){
		if ((index == 1) && ((int)coordinate >= X_MIN) && ((int)coordinate <= X_MAX))
			return true;
		if ((index == 2) && ((int)coordinate >= Y_MIN) && ((int)coordinate <= Y_MAX))
			return true;
		return false;
	}
	
	/**
	 * Return the position for this Mazub character.
	 * 	The position gives a combination of the X and Y position of the bottom left corner of the character.
	 * @return The length of the resulting array is equal to the number of coordinates ascribed to this 
	 * 			character (2).
	 * 			| result.length == getNbPosition()
	 * @return Each element in the resulting array is equal to the coordinate ascribed to this character
	 * 			at the corresponding index.
	 * 			| for each I in 0..result.length-1:
	 * 			|	result[I].equals(getPositionAt(I+1))
	 */
	public double[] getPosition() {
		return this.Position.clone();
	}
	
	/**
	 * Set the coordinate ascribed to this character at the given index to the given coordinate
	 * 
	 * @param coordinate
	 * 			The coordinate to register
	 * @param index
	 * 			The index for the coordinate to register
	 * @throws ArrayIndexOutOfBoundsException
	 * 			The index must be positive and may not be greater than 2
	 * 			| (index <= 0) || (index > 2)
	 * @throws IllegalArgumentException
	 * 			The given coordinate must be a valid coordinate at the given index.
	 * 			| (! isValidPositionAt(coordinate, index))
	 * @post This character has the given coordinate as its coordinate at the given index.
	 * 			| new.getPositionAt(index) == coordinate
	 */
	private void setPositionAt(double coordinate, int index) throws ArrayIndexOutOfBoundsException, 
	IllegalArgumentException{
		if (! isValidPositionAt(coordinate, index))
			throw new IllegalArgumentException();
		this.Position[index-1] = coordinate;
	}
		
	/**
	 * Variable registering the position of the bottom left corner of the Mazub Sprite.
	 */
	private double[] Position = {0.0, 0.0};
	
	/**
	 * Return the sprite from the character's array of sprites at the given index.
	 * @param index
	 * 			the index of the sprite to return.
	 * @pre	The given index must be positive and may not exceed the total number of sprites that the
	 * 		character has.
	 * 		| (index > 0) && (index <= getNbImages())
	 */
	@Basic
	public Sprite getImageAt(int index) {
		return images[index-1];
	}
	
	/**
	 * Return the character's array of sprites
	 * @return the length of the returned array is equal to the number of sprites this character has.
	 * 			| result.length == getNbImages()
	 * @return Each sprite in the array is equal to the sprite ascribed to this character at the
	 * 			corresponding index.
	 * 			| for i in 0..result.length-1:
	 * 			|	result[i].equals(getImageAt(i+1))
	 */
	@Immutable
	public Sprite[] getImages(){
		return this.images.clone();
	}
	
	/**
	 * Check whether the given array of sprites is valid.
	 * @param images
	 * 			the array of sprites to be checked.
	 * @return true if and only if there are no null entities in the array
	 * 			| for sprite in images:
	 * 			|	if (sprite == null)
	 * 			|		return false
	 * 			| return true
	 */
	public boolean hasProperSprites(Sprite[] images){
		for (Sprite sprite: images){
			if (sprite == null)
				return false;
		}
		return true;
	}
	
	/**
	 * An array of Sprites to display the character.
	 */
	private Sprite[] images;

}
