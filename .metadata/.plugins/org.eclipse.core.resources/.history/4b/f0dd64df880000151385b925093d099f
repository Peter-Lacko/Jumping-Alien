package jumpingalien.model.program.statement;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

import jumpingalien.model.program.type.Object;
import jumpingalien.part3.programs.SourceLocation;

public class StatementSequence extends Statement {

	public StatementSequence(SourceLocation sourceLocation, List<Statement> statements){
		super(sourceLocation);
		if (statements == null)
			this.statements = new Statement[] {};
		else{
			java.lang.Object[] resultArray = statements.toArray();
			this.statements = Arrays.copyOf(resultArray, resultArray.length, Statement[].class);
			for (Statement statement : statements){
				if (statement != null)
					statement.setEnclosingStatement(this);
			}
		}
	}

	private final Statement[] statements;

	public Statement[] getStatements() {
		return statements;
	}

	public Statement getStatementAt(int index) throws IndexOutOfBoundsException{
		return statements[index-1];
	}
	
	public int getNbStatements(){
		return statements.length;
	}

	@Override
	public Iterator<Statement> iterator() {
		return new Iterator<Statement>(){

			@Override
			public boolean hasNext() {
				if (getNbStatements() == 0)
					return false;
				else{
					if (currentIterator == null)
						newIterator = getStatementAt(1).iterator();
					else
						newIterator = currentIterator;
					if (newIterator.hasNext())
						return true;
					else{
						for (int i=1; i <= (getNbStatements()-index); i++){
							if (getStatementAt(index+i) != null){
								newIterator = getStatementAt(index+i).iterator();
								if (newIterator.hasNext())
									return true;
							}
						}
						return false;
					}
				}
			}
			
			@Override
			public Statement next() throws NoSuchElementException{
				if (! hasNext())
					throw new NoSuchElementException();
				if (currentIterator == null)
					currentIterator = getStatementAt(index).iterator();
				while (! currentIterator.hasNext()){
					index++;
					currentIterator = getStatementAt(index).iterator();
				}
				return currentIterator.next();
			}

			private Iterator<Statement> newIterator;
			
			private Iterator<Statement> currentIterator = null;
			
			private int index = 1;

		};
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		//hier gebeurd niets? is dat ok?
	}

}
