package jumpingalien.model;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Immutable;
import be.kuleuven.cs.som.annotate.Raw;
import jumpingalien.util.Sprite;

public class Buzam extends Aliens implements OtherCharacters {

	/**
	 * initialize a buzam alien with a given x_pos, y_pos and sprites.
	 * @param x_pos
	 * 			the initial x-coordinate for buzam.
	 * @param y_pos
	 * 			the initial y-coordinate for buzam.
	 * @param sprites
	 * 			the array of sprites used to display buzam.
	 * @post	buzam starts at the given position.
	 * 			| new.getPosition().equals({(double) x_pos, (double) y_pos})
	 * @post	buzam's sprite set is equal to the given one.
	 * 			| new.getImages().equals(sprites)
	 * @post	buzam's image length is equal to the length of the given sprite array
	 * 			|new.getNbImages() == sprites.length
	 * @post	buzam's horizontal acceleration is set to 0.9
	 * 			| new.getAbsHorizontalAcceleration() == 0.9
	 * @post	buzam's max horizontal velocity is set to 3
	 * 			| new.getMaxHorizontalVelocity == 3.0
	 * @post	buzam's initial horizontal velocity is set to 1
	 * 			| Math.abs(new.getInitHorizontalVelocity()) == 1.0
	 * @post	buzam's initial vertical velocity is set to 8
	 *			| new.getInitVerticalVelocity() == 8.0
	 * @post	buzam's displayed sprite is the first sprite in the given array of sprites
	 * 			| new.getSprite() == sprites[0]
	 * @post	buzam's hit points is set to 500
	 * 			|new.getHitPoints() == 500
	 * @post	the amount of buzam's running sprites is equal to the sprite array length, divided
	 * 			by 2, then diminished by 4
	 * 			|new.getNbRunningCycle() == sprites.length/2-4
	 * @post	|new.getDurationRange() == {0.0,0.0}
	 * @throws IllegalArgumentException
	 * 			the amount of images provided is invalid
	 * 			|! isValidNbImages(sprites.length)
	 */
	@Raw
	public Buzam(int x_pos, int y_pos, Sprite[] sprites)
			throws IllegalArgumentException {
		super(x_pos, y_pos, sprites, 0.9, 3.0, 1.0, 8.0,500);
		durationRange = new double[] {0.0,0.0};
	}

	/**
	 * A getter method for the variable durationRange
	 */
	@Basic @Override @Immutable
	public double[] getDurationRange() {
		return durationRange.clone();
	}

	/**
	 * A variable containing the range of the movement durations of the characters
	 */
	private final double[] durationRange;

	@Override @Basic @Immutable
	public double getTimeSinceStartMovement() {
		return timeSinceStartMovement;
	}

	/**
	 * A setter method for the variable timeSinceStartMovement
	 * @post	|new.getTimeSinceStartMovement() == time
	 */
	@Override
	public void setTimeSinceStartMovement(double time) {
		timeSinceStartMovement = time;
	}

	/**
	 * A double containing the time since the start of a movement
	 */
	private double timeSinceStartMovement = 0.0;

	@Override @Basic @Immutable
	public double getMovementDuration() {
		return movementDuration;
	}

	/**
	 * A setter method for the variable movementDuration
	 * @post	|new.getMovementDuration() == duration
	 */
	@Override
	public void setMovementDuration(double duration) throws IllegalArgumentException{
		if (! canHaveAsMovementDuration(duration))
			throw new IllegalArgumentException();
		movementDuration = duration;
	}

	/**
	 * A double containing the movement duration
	 */
	private double movementDuration = 0.0;

	@Override @Basic
	public double getTerminateTime() {
		return terminateTime;
	}

	/**
	 * A setter method for the variable terminate time
	 * @post	|new.getTerminateTime() == time
	 */
	@Override
	public void setTerminateTime(double time) {
		terminateTime = time;
	}	

	/**
	 * A double containing the terminate time
	 */
	private double terminateTime = 0.0;

	/**
	 * @param other
	 * @post	|if (other instanceof Mazub)
	 *			|	then result == true;
	 *			|else if (other instanceof Shark)
	 *			|	then result == true;
	 *			|else if (other instanceof Slime)
	 *			|	then reult == true;
	 *			|else if (other instanceof Buzam)
	 *			|	then result == true;
	 *			|else if (other instanceof Plant)
	 *			|	then result == false;
	 *			|else
	 *			|	the result == other.collide(this);
	 */
	@Override @Raw
	public boolean collide(Characters other) {
		if (other instanceof Mazub)
			return true;
		else if (other instanceof Shark)
			return true;
		else if (other instanceof Slime)
			return true;
		else if (other instanceof Buzam)
			return true;
		else if (other instanceof Plant)
			return false;
		else
			return other.collide(this);
	}

	/**
	 * Determine what happens to this and another colliding character
	 * @param other
	 * 			the other character that is colliding with this character
	 * @effect	|if (! isImmune())
	 * 			|	then if other instanceof Mazub || Shark || Slime
	 * 			|		then {this.damage(50)
	 * 			|		other instanceof Slime ? other.damageSlime(50) : other instanceof Mazub &&
	 * 			|			other.isImmune()? --:other.damage(50)
	 * 			|		other instanceof Mazub ? other.startImmune(): --
	 * 			|		startImmune()}
	 * 			|else if other instanceof Plant && ! other.isTerminated()
	 * 			|	then eat(other)
	 * 			|else if other instanceof Buzam then {}
	 * 			|else other.collision(this)
	 */
	@Override
	public void collision(Characters other){
		if (! isImmune()){
			if (other instanceof Mazub){
				if (! ((Mazub)other).isImmune()){
					other.damage(50);
					((Mazub)other).startImmune();
					this.damage(50);				
				}
			}
			else if (other instanceof Shark){
				other.damage(50);
				this.damage(50);
			}
			else if (other instanceof Slime){
				this.damage(50);
				((Slime)other).damageSlime(50);
			}
			startImmune();
		}
		else if (other instanceof Plant){
			if (! other.isTerminated())
				eat(((Plant)other));
		}
		else if (other instanceof Buzam){}
		else
			other.collision(this);
	}

	/**
	 * Determine what happens to this and another colliding character while this character possibly
	 * receives no damage from the other character
	 * @param other
	 * 			the other character that is colliding with this character
	 * @effect	|if (! isImmune())
	 * 			|	then if other instanceof Mazub || Shark || Slime
	 * 			|		then {other instanceof Slime ? other.damgaeSlime(50) : other.damage(50)
	 * 			|		other instanceof Mazub ? other.startImmune(): --}
	 * 			|else if other instanceof Plant || Buzam
	 * 			|	then collision(other)
	 * 			|else other.collisionNoDamageTo(this)
	 */
	@Override
	public void collisionNoDamageFrom(Characters other){
		if (! isImmune()){
			if (other instanceof Mazub){
				if (! ((Mazub)other).isImmune()){
					other.damage(50);
					((Mazub)other).startImmune();				
				}
			}
			else if (other instanceof Shark){
				other.damage(50);
			}
			else if (other instanceof Slime){
				((Slime)other).damageSlime(50);
			}
		}
		else if (other instanceof Plant){
			collision(other);
		}
		else if (other instanceof Buzam){}
		else
			other.collisionNoDamageTo(this);
	}

	/**
	 * Determine what happens to this and another colliding character while this character possibly
	 * deals no damage to the other character
	 * @param other
	 * 			the other character that is colliding with this character
	 * @effect	|if (! isImmune())
	 * 			|	then if other instanceof Mazub
	 * 			|		then this.damage(50)
	 * 			|	else if other instanceof Slime || Shark
	 * 			|		then collision(other)
	 * 			|		startImmune()}
	 * 			|else if other instanceof Plant
	 * 			|	then collision(other)
	 * 			|else if other instanceof Buzam then {}
	 * 			|else other.collisionNoDamageFrom(this)
	 */
	@Override
	public void collisionNoDamageTo(Characters other){
		if (! isImmune()){
			if (other instanceof Mazub){
				if (! ((Mazub)other).isImmune()){
					this.damage(50);				
				}
			}
			else if (other instanceof Shark){
				collision(other);
			}
			else if (other instanceof Slime){
				collision(other);
			}
			startImmune();
		}
		else if (other instanceof Plant){
			collision(other);
		}
		else if (other instanceof Buzam){}
		else
			other.collisionNoDamageFrom(this);
	}

	/**
	 * A more specific (detailed) method to advance time.
	 * @param duration
	 * 			the amount of time to advance
	 * @post	if the character's hit points are 0, then the new character is terminated.
	 * 			|if(getHitPoints() == 0)
	 * 			|	then isTerminated() == true;
	 * @post	for the next postconditions, the following condition applies: the characters hitpoints is not 0
	 * 			|if (getHitPoints() != 0){
	 * @post	a new horizontal position and velocity is set
	 * 			|new.getHorizontalPosition() ?= this.getHorizontalPosition()
	 * 			|new.getHorizontalVelocity() ?= this.getHorizontalVelocity()
	 * @post	a new vertical position and velocity is set
	 * 			|new.getVerticalPosition() ?= this.getVerticalPosition()
	 * 			|new.getVerticalVelocity() ?= this.getVerticalVelocity()
	 * @post	a new sprite is set
	 * @effect	the character suffers from possible enviromental damage (and loses hit points)
	 * 			|this.environmentalDamage(duration)
	 * 			|}
	 * @effect	|if isTerminated()
	 * 			|	then {setTerminateTime(getTerminateTime()+duration)
	 * 			|		if ((this.getTerminateTime()+duration > 0.6) && (! (this.getWorld() == null)))
	 * 			|			then getWorld().removeAsObject(this)
	 * @effect	For the next @effect clauses, it is assumed buzam is not terminated
	 * 			|if ! isTerminated()
	 * @effect	the correct directions are set
	 * 			|this.determineDirection()
	 * @effect	if buzam is trying to stand up, and can stand up, he will finish his duck
	 * 			|	if (isEndDuck())
	 *			|		then if (canEndDuck() && canEndDuckWithoutMove())
	 *			|			then finishDuck();
	 * @effect	if buzam is moving left or right, it's new time since a step is set
	 * 			|	if (isMovingLeft() || isMovingRight())
	 *			|		then setTimeSinceStep(getTimeSinceStep() + duration);
	 *			otherwise, its time since an end move is set, and possible direction buzam has moved in is set
	 *			|	else setTimeSinceEndMove(getTimeSinceEndMove() + duration)
	 *			|	if (this.getTimeSinceEndMove()+ duration > 1.0)
	 *			|		then sethasMovedIn(MovementDirection.NONE)
	 * @effect	Buzam's immunity is set to the correct status
	 * 			|	immune(duration)
	 */
	@Override
	public void advanceTimeLong (double duration) throws IllegalArgumentException {
		super.advanceTimeLong(duration);
		if (! isTerminated()){
			this.determineDirection();
			if (isEndDuck())
				if (canEndDuck() && canEndDuckWithoutMove())
					finishDuck();
			if (isMovingLeft() || isMovingRight())
				setTimeSinceStep(getTimeSinceStep() + duration);
			else
				setTimeSinceEndMove(getTimeSinceEndMove() + duration);
			if (this.getTimeSinceEndMove() > 1.0)
				this.sethasMovedIn(MovementDirection.NONE);
			this.immune(duration);
		}
		else{
			this.setTerminateTime(getTerminateTime()+duration);
			if ((this.getTerminateTime() > 0.6) && (! (this.getWorld() == null)))
				this.getWorld().removeAsObject(this);
		}
	}

	/**
	 * @post	|isMovingRight() == false || true
	 * 			|isMovingLeft() == false || true
	 * @post	|new.getMovementDuration() == randomValue(getDurationRange()) == 0.0
	 * @post	|new.getTimeSinceStartMovement() == getTimeSinceStartMovement() - getMovementDuration() == 0.0
	 */
	@Override
	public void selectMovements(){
	}
	
	/**
	 * 
	 * @param index
	 * @return result == getDurationRange()[index-1]
	 */
	@Override
	public double getDurationRangeValueAt(int index) {
		return 0.0;
	}
	
}
