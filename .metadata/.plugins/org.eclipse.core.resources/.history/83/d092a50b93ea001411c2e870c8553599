package jumpingalien.model;

import jumpingalien.util.Sprite;

public class Plant extends OtherCharacters {

	public Plant(int x_pos, int y_pos, Sprite[] sprites)
			throws IllegalArgumentException {
		super(x_pos, y_pos, sprites, 0.0, 0.5, 0.5, 0.0,1);
		setMovementDuration(0.5);
		setMovingRight(true);
	}

	@Override
	protected void computeNewHorizontalPositionAfter(double duration) {
		double newPosition;
		if (isMovingLeft() || isMovingRight())
			newPosition = this.getPositionAt(1) + 100*duration*this.getHorizontalVelocity();
		else
			newPosition = this.getPositionAt(1);
		if (canHaveAsNewPosition(newPosition,1))
			this.setPositionAt(newPosition, 1);
	}

	
	@Override
	protected void computeNewHorizontalVelocityAfter(double duration) {
		 if (isMovingLeft())
			this.setHorizontalVelocity(-0.5);
		 if (isMovingRight())
			this.setHorizontalVelocity(0.5);
	}
	
	@Override
	public double calculateNewVerticalPositionAfter(double duration){
		if (! isTerminated()){		
			return this.getPositionAt(2);
		}
		else
			return 0.0;
	}
	
	public MovementDirection getLastDirection() {
		return lastDirection;
	}

	public void setLastDirection(MovementDirection lastDirection) {
		this.lastDirection = lastDirection;
	}
	
	public MovementDirection lastDirection = MovementDirection.RIGHT;
	
	/**
	 * @effect	...
	 * 			| if getLastDirection() == MovementDirection.RIGHT
	 * 			|	then setMovingLeft(true)
	 * 			|		setLastDirection(MovementDirection.LEFT)
	 * 			|		setHorizontalVelocity(-getInitHorizontalVelocity())
	 * 			| else
	 * 			|	then setLastDirection(MovementDirection.RIGHT)
	 * 			|		setLastDirection(MovementDirection.RIGHT)
	 * 			|		setHorizontalVelocity(getInitHorizontalVelocity())
	 */
	@Override
	public void startMove() {
		if (getLastDirection() == MovementDirection.RIGHT){
			setMovingLeft(true);
			setLastDirection(MovementDirection.LEFT);
			setHorizontalVelocity(-getInitHorizontalVelocity());
		}
		else{
			setLastDirection(MovementDirection.RIGHT);
			setMovingRight(true);
			setHorizontalVelocity(getInitHorizontalVelocity());
		}
	}

	/**
	 * @effect	...
	 * 			|setTimeSinceStartMovement(0.0)
	 * 			|setMovingRight(false)
	 * 			|setMovingLeft(false)
	 */
	@Override
	public void endMove() {
		setTimeSinceStartMovement(0.0);
		setMovingRight(false);
		setMovingLeft(false);
	}

	/**
	 * 
	 * @param duration
	 * @effect 
	 * 			| this.setPositionAt(this.getPositionAt(2), 2)
	 */
	@Override
	protected void computeNewVerticalPositionAfter(double duration) {
		this.setPositionAt(this.getPositionAt(2), 2);
	}

	/**
	 * 
	 * @param duration
	 * @effect
	 * 			| this.setinitVerticalVelocity(0.0);
	 */
	@Override
	protected void computeNewVerticalVelocityAfter(double duration) {
		this.setinitVerticalVelocity(0.0);
	}

	@Override
	public void startJump() {

	}


	@Override
	public boolean isInAir() {
		return false;
	}

	/**
	 * 
	 * @param other
	 * 			the other character in the collision
	 * @param isBelow
	 * 			a boolean stating whether this is below other
	 * @effect	...
	 * 			| if ((other instanceof Mazub) && (not this.isTerminated())
	 * 			|	then other.eat(this)
	 */
	@Override
	public void collision(Characters other, boolean isBelow) {
		if (other instanceof Mazub){
			if (! this.isTerminated())
				((Mazub) other).eat(this);
//			this.terminate();
		}
	}

	@Override
	public void environmentDamage(double duration) {		
	}
	
	/**
	 * @effect	...
	 * 			| if not this.isTerminated
	 * 			|	then this.setTerminated(true)
	 * 			|		this.getWorld().removeAsObject(this)
	 * 			|		this.setHorizontalVelocity(0.0)
	 * 			|		this.setVerticalVelocity(0.0)
	 */
	protected void terminate() {
		if (! isTerminated()){
			this.setTerminated(true);
			this.getWorld().removeAsObject(this);
			this.setHorizontalVelocity(0.0);
			this.setVerticalVelocity(0.0);
		}
	}

}
