package jumpingalien.part3.tests;

import static jumpingalien.tests.util.TestUtils.intArray;
import static jumpingalien.tests.util.TestUtils.spriteArrayForSize;
import static org.junit.Assert.*;
import jumpingalien.model.*;
import jumpingalien.model.program.expression.*;
import jumpingalien.model.program.expression.unary.*;
import jumpingalien.model.program.type.*;
import jumpingalien.model.program.type.Object;
import jumpingalien.part3.programs.IProgramFactory.Direction;
import jumpingalien.part3.programs.SourceLocation;

import org.junit.Test;

public class ExpressionTest {
	
	private SourceLocation loc = new SourceLocation(0, 0);
	
	@Test
	public void booleanTest(){
		Bool b = new Bool(true);
		ExpressionBasic<Bool> expr = new ExpressionBasic<Bool>(b,loc);
		assertTrue(expr.compute().getValue());
		b = new Bool(false);
		expr = new ExpressionBasic<Bool>(b,loc);
		assertTrue(! expr.compute().getValue());
	}
	
	@Test
	public void doubleTest(){
		DoubleType d = new DoubleType(10.0);
		ExpressionBasic<DoubleType> expr = new ExpressionBasic<DoubleType>(d,loc);
		assert(expr.compute().getValue() == 10.0);
	}

	@Test
	public void directionTest(){
		DirectionType d = new DirectionType(Direction.DOWN);
		ExpressionBasic<DirectionType> expr = new ExpressionBasic<DirectionType>(d,loc);
		assert(expr.compute().getValue() == Direction.DOWN);
	}
	
	@Test
	public void objectTest(){
		Mazub m = new Mazub(1,1,spriteArrayForSize(2, 2));
		Object alien = new Object(m);
		ExpressionBasic<Object> expr = new ExpressionBasic<Object>(alien,loc);
		assert(expr.compute().getValue() instanceof Mazub);
		assertArrayEquals(intArray(1,1),((Mazub)expr.compute().getValue()).getIntPosition());
	}
	
	@Test
	public void randomDoubleTest(){
		DoubleType d = new DoubleType(10.0);
		ExpressionBasic<DoubleType> expr = new ExpressionBasic<DoubleType>(d,loc);
		ExpressionRandomDouble ran = new ExpressionRandomDouble(expr,loc);
		// bijna altijd niet <= genomen omdat het dan zou werken als random gewoon maxvalue teruggaf
		assert(ran.compute().getValue() < 10.0);
	}
	
	
}
