package jumpingalien.model;

import jumpingalien.util.Sprite;
import java.util.Random;

public abstract class OtherCharacters extends Characters {

	public OtherCharacters(int x_pos, int y_pos, Sprite[] sprites,double hor_acc, double max_hor_vel, 
			double init_hor_vel, double init_ver_vel) throws IllegalArgumentException {
		super(x_pos, y_pos, sprites, hor_acc, max_hor_vel, init_hor_vel, init_ver_vel);
	}

	@Override
	public Sprite getCurrentSprite() {
		return leftOrRightSprite(0);
	}

	@Override
	public boolean canHaveAsIndex(int number) {
		return ((number >= 0) && (number < 2));
	}

	@Override
	public boolean isValidNbImages(int nbImages) {
		return (nbImages == 2);
	}

	@Override
	protected abstract void computeNewHorizontalPositionAfter(double duration) ;

	@Override
	protected abstract void computeNewHorizontalVelocityAfter(double duration) ;
	
	@Override
	public void advanceTime(double duration){
		if (this.timeSinceStartMovement > movementDuration){
				computeNewHorizontalPositionAfter(duration);
				computeNewHorizontalVelocityAfter(duration);
				computeNewVerticalPositionAfter(duration);
				computeNewVerticalVelocityAfter(duration);
		}
		else{
			endMovement();
			timeSinceStartMovement = 0.0;
			startMovement();
		}
	}

	public void startMovement() {
		
	}
	
	public void checkMovement(double duration){
		if (timeSinceStartMovement > duration){
			endMovement();
		}
	}

	public void endMovement() {
	}
	
	public String lefOrRight(){
		if ((this.lastDirection == "left") || getRandomBoolean())
			return "right";
		else
			return "left";
	}
	
	public boolean getRandomBoolean() {
	    Random random = new Random();
	    return random.nextBoolean();
	}
	
	public double getTimeSinceStartMovement() {
		return timeSinceStartMovement;
	}

	public void setTimeSinceStartMovement(double timeSinceStartMovement) {
		this.timeSinceStartMovement = timeSinceStartMovement;
	}
	
	public double timeSinceStartMovement = 0.0;

	public String lastDirection;
	
	public boolean  isMoving = false;
	
	public double movementDuration;

	@Override
	protected abstract void computeNewVerticalPositionAfter(double duration) ;

	@Override
	protected abstract void computeNewVerticalVelocityAfter(double duration) ;



	@Override
	public abstract void startJump() ;

}
